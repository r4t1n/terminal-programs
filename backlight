#!/usr/bin/env python3

import argparse, os

# ARGPARSE
parser = argparse.ArgumentParser(description="Change the backlight brightness")

parser.add_argument("backlight", nargs="?", type=float, default=100, help="set the backlight brightness as a percentage (default: 100)")
parser.add_argument("--get", action="store_true", help="get the backlight brightness and max brightness")

args = parser.parse_args()

class color:
    blue = "\033[1;34;48m"
    red = "\033[1;31;48m"
    end = "\033[1;37;0m"

# CONSTANTS
BACKLIGHT_PATH = "/sys/class/backlight"

def find_device_path():
    try:
        device_path = next(os.walk(BACKLIGHT_PATH))[1]

        if not device_path:
            raise FileNotFoundError("no device directories found in: " + BACKLIGHT_PATH)

        backlight_device_path = os.path.join(BACKLIGHT_PATH, device_path[0])
        return backlight_device_path
    except (StopIteration, FileNotFoundError) as e:
        print(f" {color.red}Error finding device directory:{color.end} {e}")
        exit(1)

def get_brightness(backlight_device_path, max_brightness_path):
    actual_brightness_path = os.path.join(backlight_device_path, "actual_brightness")

    try:
        with open(actual_brightness_path, "r") as actual_brightness_file:
            actual_brightness = actual_brightness_file.read().strip()
        with open(max_brightness_path, "r") as max_brightness_file:
            max_brightness = max_brightness_file.read().strip()
    except IOError as e:
        print(f" {color.red}Error reading from {actual_brightness_path} or {max_brightness_path}:{color.end} {e}")
        exit(1)

    print(f"     {color.blue}Backlight brightness:{color.end} {actual_brightness}\n {color.blue}Max backlight brightness:{color.end} {max_brightness}")

def main():
    backlight_device_path = find_device_path()
    max_brightness_path = os.path.join(backlight_device_path, "max_brightness")

    if args.get:
        get_brightness(backlight_device_path, max_brightness_path)
    else:
        brightness_path = os.path.join(backlight_device_path, "brightness")
        brightness_value = int((args.backlight / 100) * max_brightness)
        print(brightness_value)

        if os.geteuid() != 0:
            exit(color.red + " You need to have root privileges to set the brightness!")

        try:
            with open(max_brightness_path, "r") as max_brightness_file:
                max_brightness = max_brightness_file.read().strip()
        except IOError as e:
            print(f" {color.red}Error reading from {max_brightness_path}:{color.end} {e}")

        brightness_value = int((args.backlight / 100) * max_brightness)
        print(brightness_value)

        try:
            with open(brightness_path, "w") as brightness_file:
                brightness_file.write(str(brightness_value))
        except IOError as e:
            print(f" {color.red}Error writing to {brightness_path}:{color.end} {e}")

if __name__ == "__main__":
    main()

